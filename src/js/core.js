/**
 * Core System - Initiateur principal du Portfolio OS
 * G√®re l'initialisation et la coordination de tous les modules du syst√®me
 */

import Storage from './storage.js';
import NotificationSystem from './notifications.js';
import WindowManager from './windows.js';
import AppLauncher from './launcher.js';
import UIManager from './ui.js';
import { CONFIG } from './config.js';

/**
 * Classe principale du syst√®me Portfolio OS
 * Permet d'acc√©der √† tous les modules via this.storage, this.notifications, etc.
 */
export default class PortfolioOS {
  constructor() {
    // √âtats du syst√®me
    this.isInitialized = false;
    this.currentTheme = 'windows';
    this.modules = new Map();

    // Initialiser les modules principaux
    this.initializeModules();

    // Configurer les √©v√©nements globaux
    this.setupGlobalEvents();

    console.log('üöÄ Portfolio OS - Syst√®me initialis√©');
  }

  /**
   * Initialiser tous les modules du syst√®me
   */
  initializeModules() {
    try {
      // Storage - doit √™tre initialis√© en premier
      this.storage = new Storage();
      this.modules.set('storage', this.storage);

      // Notifications - syst√®me de notifications intelligent
      this.notifications = new NotificationSystem();
      this.modules.set('notifications', this.notifications);

      // Window Manager - gestionnaire de fen√™tres
      this.windows = new WindowManager(this);
      this.modules.set('windows', this.windows);

      // App Launcher - lanceur d'applications
      this.launcher = new AppLauncher(this);
      this.modules.set('launcher', this.launcher);

      // UI Manager - gestionnaire d'interface
      this.ui = new UIManager(this);
      this.modules.set('ui', this.ui);

      // Configuration globale
      this.config = CONFIG;

      console.log('‚úÖ Tous les modules initialis√©s avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des modules:', error);
      this.handleInitializationError(error);
    }
  }

  /**
   * Configurer les √©v√©nements globaux du syst√®me
   */
  setupGlobalEvents() {
    // √âv√©nements de cycle de vie
    window.addEventListener('beforeunload', () => {
      this.beforeUnload();
    });

    window.addEventListener('unload', () => {
      this.onUnload();
    });

    // √âv√©nements de visibilit√©
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.onHidden();
      } else {
        this.onVisible();
      }
    });

    // √âv√©nements de redimensionnement
    window.addEventListener('resize', () => {
      this.onResize();
    });

    // √âv√©nements de r√©seau
    window.addEventListener('online', () => {
      this.onOnline();
    });

    window.addEventListener('offline', () => {
      this.onOffline();
    });

    // √âv√©nements de th√®me
    this.addEventListener('theme-change', (event) => {
      this.onThemeChange(event.detail);
    });
  }

  /**
   * Initialiser compl√®tement le syst√®me
   */
  async init() {
    if (this.isInitialized) {
      console.warn('‚ö†Ô∏è Le syst√®me est d√©j√† initialis√©');
      return;
    }

    try {
      // Charger les pr√©f√©rences utilisateur
      await this.loadUserPreferences();

      // Initialiser l'interface utilisateur
      await this.ui.init();

      // Initialiser le syst√®me de notifications
      await this.notifications.init();

      // Restaurer la session pr√©c√©dente
      await this.restoreSession();

      // Marquer comme initialis√©
      this.isInitialized = true;

      // Notification de bienvenue
      this.notifications.show({
        title: 'Portfolio OS',
        message: 'Syst√®me d√©marr√© avec succ√®s!',
        type: 'success',
        duration: 3000
      });

      // Enregistrer l'√©v√©nement de d√©marrage
      this.storage.addToHistory('system_startup', {
        timestamp: new Date().toISOString(),
        theme: this.currentTheme,
        modules: Array.from(this.modules.keys())
      });

      console.log('üéâ Portfolio OS compl√®tement initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation compl√®te:', error);
      this.handleInitializationError(error);
    }
  }

  /**
   * Charger les pr√©f√©rences utilisateur
   */
  async loadUserPreferences() {
    const preferences = this.storage.loadPreferences();

    if (preferences) {
      this.currentTheme = preferences.theme || 'windows';

      // Appliquer le th√®me
      this.setTheme(this.currentTheme);

      console.log('üìã Pr√©f√©rences utilisateur charg√©es:', preferences);
    }
  }

  /**
   * Restaurer la session pr√©c√©dente
   */
  async restoreSession() {
    const openApps = this.storage.loadOpenApps();

    if (openApps && openApps.length > 0) {
      console.log('üîÑ Restauration de la session pr√©c√©dente...');

      // Attendre un peu pour que l'interface soit pr√™te
      setTimeout(() => {
        openApps.forEach(appId => {
          this.launcher.launchApp(appId);
        });
      }, 1000);
    }
  }

  /**
   * Changer le th√®me du syst√®me
   * @param {string} theme - Le th√®me √† appliquer ('windows' ou 'macos')
   */
  setTheme(theme) {
    if (theme !== 'windows' && theme !== 'macos') {
      console.error('‚ùå Th√®me invalide:', theme);
      return;
    }

    const oldTheme = this.currentTheme;
    this.currentTheme = theme;

    // Appliquer le th√®me √† l'interface
    this.ui.setTheme(theme);

    // Sauvegarder le th√®me
    this.storage.saveTheme(theme);

    // Notifier tous les modules du changement
    this.dispatchEvent('theme-change', {
      oldTheme,
      newTheme: theme
    });

    // Notification
    this.notifications.show({
      title: 'Th√®me modifi√©',
      message: `Bascul√© vers ${theme === 'windows' ? 'Windows 11' : 'macOS'}`,
      type: 'info',
      duration: 2000
    });

    console.log(`üé® Th√®me chang√©: ${oldTheme} ‚Üí ${theme}`);
  }

  /**
   * Obtenir un module sp√©cifique
   * @param {string} moduleName - Nom du module
   * @returns {Object|null} Le module ou null si non trouv√©
   */
  getModule(moduleName) {
    return this.modules.get(moduleName) || null;
  }

  /**
   * V√©rifier si un module est disponible
   * @param {string} moduleName - Nom du module
   * @returns {boolean} True si le module est disponible
   */
  hasModule(moduleName) {
    return this.modules.has(moduleName);
  }

  /**
   * Red√©marrer un module sp√©cifique
   * @param {string} moduleName - Nom du module √† red√©marrer
   */
  async restartModule(moduleName) {
    const moduleClass = this.modules.get(moduleName);
    if (!moduleClass) {
      console.error(`‚ùå Module '${moduleName}' non trouv√©`);
      return;
    }

    try {
      console.log(`üîÑ Red√©marrage du module '${moduleName}'...`);

      // R√©initialiser le module
      if (typeof moduleClass.restart === 'function') {
        await moduleClass.restart();
      } else {
        // M√©thode par d√©faut: recr√©er l'instance
        switch (moduleName) {
          case 'notifications':
            this.notifications = new NotificationSystem();
            await this.notifications.init();
            break;
          case 'windows':
            this.windows = new WindowManager(this);
            break;
          case 'launcher':
            this.launcher = new AppLauncher(this);
            break;
          case 'ui':
            this.ui = new UIManager(this);
            await this.ui.init();
            break;
          default:
            console.warn(`‚ö†Ô∏è Pas de m√©thode de red√©marrage pour '${moduleName}'`);
        }
      }

      console.log(`‚úÖ Module '${moduleName}' red√©marr√© avec succ√®s`);
    } catch (error) {
      console.error(`‚ùå Erreur lors du red√©marrage du module '${moduleName}':`, error);
    }
  }

  /**
   * Obtenir les statistiques du syst√®me
   * @returns {Object} Statistiques compl√®tes
   */
  getSystemStats() {
    return {
      uptime: this.getUptime(),
      theme: this.currentTheme,
      modules: Array.from(this.modules.keys()),
      storage: this.storage.getUsageStats(),
      notifications: this.notifications.getStats(),
      windows: this.windows.getStats(),
      memory: this.getMemoryStats()
    };
  }

  /**
   * Obtenir le temps de fonctionnement
   * @returns {number} Temps en millisecondes
   */
  getUptime() {
    return Date.now() - this.startTime;
  }

  /**
   * Obtenir les statistiques de m√©moire
   * @returns {Object} Statistiques m√©moire
   */
  getMemoryStats() {
    if ('memory' in performance) {
      return {
        used: performance.memory.usedJSHeapSize,
        total: performance.memory.totalJSHeapSize,
        limit: performance.memory.jsHeapSizeLimit
      };
    }
    return { available: false };
  }

  /**
   * Exporter toutes les donn√©es du syst√®me
   * @returns {Object} Donn√©es export√©es
   */
  exportSystemData() {
    return {
      version: '2.0.0',
      exportedAt: new Date().toISOString(),
      theme: this.currentTheme,
      data: this.storage.exportData(),
      stats: this.getSystemStats()
    };
  }

  /**
   * Importer des donn√©es syst√®me
   * @param {Object} data - Donn√©es √† importer
   * @returns {boolean} Succ√®s de l'importation
   */
  async importSystemData(data) {
    try {
      if (!data || !data.version) {
        throw new Error('Donn√©es d\'importation invalides');
      }

      // Importer les donn√©es de stockage
      if (data.data) {
        this.storage.importData(data.data);
      }

      // Appliquer le th√®me
      if (data.theme) {
        this.setTheme(data.theme);
      }

      this.notifications.show({
        title: 'Import r√©ussi',
        message: 'Les donn√©es ont √©t√© import√©es avec succ√®s',
        type: 'success',
        duration: 4000
      });

      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'importation:', error);

      this.notifications.show({
        title: 'Erreur d\'import',
        message: 'Impossible d\'importer les donn√©es',
        type: 'error',
        duration: 5000
      });

      return false;
    }
  }

  // === √âv√©nements de cycle de vie ===

  /**
   * Avant d√©chargement de la page
   */
  beforeUnload() {
    // Sauvegarder l'√©tat des applications ouvertes
    const openApps = this.windows.getOpenWindows();
    this.storage.saveOpenApps(openApps);

    // Enregistrer la fin de session
    this.storage.addToHistory('system_shutdown', {
      timestamp: new Date().toISOString(),
      uptime: this.getUptime(),
      openApps: openApps.length
    });
  }

  /**
   * Lors du d√©chargement de la page
   */
  onUnload() {
    console.log('üëã Portfolio OS - Arr√™t du syst√®me');
  }

  /**
   * Quand la page devient cach√©e
   */
  onHidden() {
    this.storage.addToHistory('system_hidden', {
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Quand la page redevient visible
   */
  onVisible() {
    this.storage.addToHistory('system_visible', {
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Lors du redimensionnement de la fen√™tre
   */
  onResize() {
    this.ui.adjustUIForScreenSize();
  }

  /**
   * Quand la connexion internet est r√©tablie
   */
  onOnline() {
    this.notifications.show({
      title: 'Connexion r√©tablie',
      message: 'Vous √™tes de nouveau en ligne',
      type: 'success',
      duration: 3000
    });
  }

  /**
   * Quand la connexion internet est perdue
   */
  onOffline() {
    this.notifications.show({
      title: 'Connexion perdue',
      message: 'Vous √™tes hors ligne',
      type: 'warning',
      duration: 5000
    });
  }

  /**
   * Lors du changement de th√®me
   * @param {Object} detail - D√©tails du changement
   */
  onThemeChange(detail) {
    // Mettre √† jour tous les modules
    this.modules.forEach((module, name) => {
      if (typeof module.onThemeChange === 'function') {
        module.onThemeChange(detail.newTheme);
      }
    });
  }

  /**
   * G√©rer les erreurs d'initialisation
   * @param {Error} error - L'erreur survenue
   */
  handleInitializationError(error) {
    console.error('üí• Erreur critique lors de l\'initialisation:', error);

    // Afficher une notification d'erreur
    if (this.notifications) {
      this.notifications.show({
        title: 'Erreur syst√®me',
        message: 'Une erreur est survenue lors de l\'initialisation',
        type: 'error',
        persistent: true,
        actions: [
          {
            id: 'reload',
            label: 'Recharger',
            type: 'primary',
            callback: () => window.location.reload()
          }
        ]
      });
    }
  }

  // === M√©thodes utilitaires ===

  /**
   * Ajouter un √©couteur d'√©v√©nement personnalis√©
   * @param {string} eventName - Nom de l'√©v√©nement
   * @param {Function} callback - Fonction de rappel
   */
  addEventListener(eventName, callback) {
    document.addEventListener(`portfolioos-${eventName}`, callback);
  }

  /**
   * Supprimer un √©couteur d'√©v√©nement personnalis√©
   * @param {string} eventName - Nom de l'√©v√©nement
   * @param {Function} callback - Fonction de rappel
   */
  removeEventListener(eventName, callback) {
    document.removeEventListener(`portfolioos-${eventName}`, callback);
  }

  /**
   * D√©clencher un √©v√©nement personnalis√©
   * @param {string} eventName - Nom de l'√©v√©nement
   * @param {Object} detail - Donn√©es de l'√©v√©nement
   */
  dispatchEvent(eventName, detail = {}) {
    document.dispatchEvent(new CustomEvent(`portfolioos-${eventName}`, {
      detail,
      bubbles: true
    }));
  }

  /**
   * Cr√©er une nouvelle instance de classe qui √©tend PortfolioOS
   * Permet d'acc√©der aux modules via this.storage, this.notifications, etc.
   */
  static createExtendedClass() {
    return class extends PortfolioOS {
      constructor() {
        super();
      }
    };
  }
}

// Cr√©er et exporter l'instance globale
const portfolioOS = new PortfolioOS();

// Exposer globalement pour faciliter le d√©bogage
window.portfolioOS = portfolioOS;

export { portfolioOS };
